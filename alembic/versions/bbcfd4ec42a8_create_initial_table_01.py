"""CREATE_INITIAL_TABLE_01

Revision ID: bbcfd4ec42a8
Revises: f5bc1a145eb1
Create Date: 2025-08-22 15:19:15.707351

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "bbcfd4ec42a8"
down_revision: Union[str, None] = "f5bc1a145eb1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind.engine)
    table_names = inspector.get_table_names()
    # ### commands auto generated by Alembic - please adjust! ###
    if "email_config" not in table_names:
        op.create_table(
            "email_config",
            sa.Column("server", sa.String(), nullable=False),
            sa.Column("port", sa.String(), nullable=False),
            sa.Column("username", sa.String(), nullable=False),
            sa.Column("password", sa.String(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )

    if "finding_name" not in table_names:
        op.create_table(
            "finding_name",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("description", sa.String(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            "idx_finding_name_product", "finding_name", ["name"], unique=True
        )
    if "global_config" not in table_names:
        op.create_table(
            "global_config",
            sa.Column("site_name", sa.String(), nullable=True),
            sa.Column("site_domain", sa.String(), nullable=True),
            sa.Column("site_logo_url", sa.String(), nullable=True),
            sa.Column("sla_critical", sa.Integer(), nullable=False),
            sa.Column("sla_high", sa.Integer(), nullable=False),
            sa.Column("sla_medium", sa.Integer(), nullable=False),
            sa.Column("sla_low", sa.Integer(), nullable=False),
            sa.Column(
                "login_via_email", sa.Boolean(), server_default="t", nullable=False
            ),
            sa.Column("okta_enabled", sa.Boolean(), server_default="f", nullable=True),
            sa.Column("okta_domain", sa.String(), nullable=True),
            sa.Column("okta_client_id", sa.String(), nullable=True),
            sa.Column("okta_client_secret", sa.String(), nullable=True),
            sa.Column("okta_redirect_url", sa.String(), nullable=True),
            sa.Column("smtp_server", sa.String(), nullable=True),
            sa.Column("smtp_port", sa.String(), nullable=True),
            sa.Column("smtp_username", sa.String(), nullable=True),
            sa.Column("smtp_password", sa.String(), nullable=True),
            sa.Column("sensitive_hosts", sa.String(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
    if "permission" not in table_names:
        op.create_table(
            "permission",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("scope", sa.String(), nullable=False),
            sa.Column("url", sa.String(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
    if "plugin" not in table_names:
        op.create_table(
            "plugin",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("description", sa.String(), nullable=True),
            sa.Column("is_active", sa.Boolean(), server_default="f", nullable=False),
            sa.Column("type", sa.String(), nullable=False),
            sa.Column("env", sa.String(), nullable=True),
            sa.Column("config", sa.String(), nullable=True),
            sa.Column("verified", sa.Boolean(), server_default="f", nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
    if "project" not in table_names:
        op.create_table(
            "project",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("type", sa.String(), nullable=False),
            sa.Column("creator_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
    if "role" not in table_names:
        op.create_table(
            "role",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("super_admin", sa.Boolean(), server_default="f", nullable=False),
            sa.Column(
                "required_project_access",
                sa.Boolean(),
                server_default="t",
                nullable=False,
            ),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
    if "auth_user" not in table_names:
        op.create_table(
            "auth_user",
            sa.Column("email", sa.String(), nullable=False),
            sa.Column("username", sa.String(), nullable=False),
            sa.Column("active", sa.Boolean(), server_default="f", nullable=False),
            sa.Column("password", sa.String(), nullable=True),
            sa.Column(
                "login_via_email", sa.Boolean(), server_default="f", nullable=False
            ),
            sa.Column("deleted_at", sa.DateTime(), nullable=True),
            sa.Column("role_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["role_id"],
                ["role.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )

    if "cve" not in table_names:
        op.create_table(
            "cve",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("priority", sa.String(), nullable=True),
            sa.Column("epss", sa.Float(), nullable=True),
            sa.Column("cvss", sa.Float(), nullable=True),
            sa.Column("cvss_version", sa.String(), nullable=True),
            sa.Column("kevList", sa.String(), nullable=True),
            sa.Column("severity", sa.String(), nullable=True),
            sa.Column("vector", sa.String(), nullable=True),
            sa.Column("finding_name_id", sa.Uuid(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["finding_name_id"], ["finding_name.id"], ondelete="CASCADE"
            ),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("name", name="uix_cve"),
        )
    if "environment" not in table_names:
        op.create_table(
            "environment",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("project_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["project_id"],
                ["project.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
    if "role_permission" not in table_names:
        op.create_table(
            "role_permission",
            sa.Column("role_id", sa.Uuid(), nullable=False),
            sa.Column("permission_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["permission_id"], ["permission.id"], ondelete="CASCADE"
            ),
            sa.ForeignKeyConstraint(["role_id"], ["role.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
        )
    if "api_token" not in table_names:
        op.create_table(
            "api_token",
            sa.Column("token", sa.String(), nullable=False),
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("creator_id", sa.Uuid(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["creator_id"],
                ["auth_user.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
    if "product" not in table_names:
        op.create_table(
            "product",
            sa.Column("name", sa.String(), nullable=False),
            sa.Column("newFindingTracker", sa.Boolean(), nullable=False),
            sa.Column("allowAsyncUpdate", sa.Boolean(), nullable=False),
            sa.Column("weEscalation", sa.Boolean(), nullable=False),
            sa.Column("moEscalation", sa.Boolean(), nullable=False),
            sa.Column("apiKey", sa.String(), nullable=True),
            sa.Column("environment_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["environment_id"],
                ["environment.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
    if "comment" not in table_names:
        op.create_table(
            "comment",
            sa.Column("comment", sa.String(), nullable=False),
            sa.Column("finding_name_id", sa.Uuid(), nullable=False),
            sa.Column("product_id", sa.Uuid(), nullable=False),
            sa.Column("commentor_id", sa.Uuid(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["commentor_id"],
                ["auth_user.id"],
            ),
            sa.ForeignKeyConstraint(
                ["finding_name_id"], ["finding_name.id"], ondelete="CASCADE"
            ),
            sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
        )
    if "finding" not in table_names:
        op.create_table(
            "finding",
            sa.Column("host", sa.String(), nullable=False),
            sa.Column("port", sa.String(), nullable=False),
            sa.Column("status", sa.String(), nullable=False),
            sa.Column(
                "severity",
                sa.Enum("CRITICAL", "HIGH", "MEDIUM", "LOW", name="severityenum"),
                nullable=False,
            ),
            sa.Column("reopen", sa.Boolean(), server_default="f", nullable=False),
            sa.Column("vpr_score", sa.String(), nullable=True),
            sa.Column("evidence", sa.String(), nullable=False),
            sa.Column("remediation", sa.String(), nullable=False),
            sa.Column("remark", sa.String(), nullable=True),
            sa.Column("internal_remark", sa.String(), nullable=True),
            sa.Column("finding_date", sa.DateTime(timezone=True), nullable=False),
            sa.Column("last_update", sa.DateTime(timezone=True), nullable=False),
            sa.Column("delay_untill", sa.DateTime(timezone=True), nullable=True),
            sa.Column("closing_effort", sa.Integer(), nullable=True),
            sa.Column("closed_at", sa.DateTime(timezone=True), nullable=True),
            sa.Column("label", sa.String(), nullable=True),
            sa.Column("plugin_id", sa.Uuid(), nullable=True),
            sa.Column("product_id", sa.Uuid(), nullable=True),
            sa.Column("finding_name_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["finding_name_id"], ["finding_name.id"], ondelete="CASCADE"
            ),
            sa.ForeignKeyConstraint(["plugin_id"], ["plugin.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            "uix_unique_finding_except_closed",
            "finding",
            ["finding_name_id", "host", "port", "plugin_id", "product_id"],
            unique=True,
            postgresql_where=sa.text("status != 'CLOSED' OR status != 'PASSED'"),
        )

    if "finding_revert_point" not in table_names:
        op.create_table(
            "finding_revert_point",
            sa.Column(
                "status",
                sa.Enum(
                    "NEW", "OPEN", "CLOSED", "EXEMPTION", "OTHERS", name="fnstatusenum"
                ),
                nullable=False,
            ),
            sa.Column(
                "severity",
                sa.Enum("CRITICAL", "HIGH", "MEDIUM", "LOW", name="severityenum"),
                nullable=False,
            ),
            sa.Column("reopen", sa.Boolean(), server_default="f", nullable=False),
            sa.Column("vpr_score", sa.String(), nullable=True),
            sa.Column("evidence", sa.String(), nullable=False),
            sa.Column("remediation", sa.String(), nullable=False),
            sa.Column("internal_remark", sa.String(), nullable=True),
            sa.Column("finding_date", sa.DateTime(timezone=True), nullable=False),
            sa.Column("last_update", sa.DateTime(timezone=True), nullable=False),
            sa.Column("label", sa.String(), nullable=True),
            sa.Column("product_id", sa.Uuid(), nullable=True),
            sa.Column("finding_name_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["finding_name_id"],
                ["finding_name.id"],
            ),
            sa.ForeignKeyConstraint(
                ["product_id"],
                ["product.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
    if "log" not in table_names:
        op.create_table(
            "log",
            sa.Column("tCritical", sa.Integer(), nullable=False),
            sa.Column("tHigh", sa.Integer(), nullable=False),
            sa.Column("tMedium", sa.Integer(), nullable=False),
            sa.Column("tLow", sa.Integer(), nullable=False),
            sa.Column("tPassed", sa.Integer(), nullable=False),
            sa.Column("tFailed", sa.Integer(), nullable=False),
            sa.Column("tWarning", sa.Integer(), nullable=False),
            sa.Column("tNew", sa.Integer(), nullable=False),
            sa.Column("tOpen", sa.Integer(), nullable=False),
            sa.Column("tClosed", sa.Integer(), nullable=False),
            sa.Column("tExemption", sa.Integer(), nullable=False),
            sa.Column("tOthers", sa.Integer(), nullable=False),
            sa.Column("bCritical", sa.Integer(), nullable=False),
            sa.Column("bHigh", sa.Integer(), nullable=False),
            sa.Column("bMedium", sa.Integer(), nullable=False),
            sa.Column("bLow", sa.Integer(), nullable=False),
            sa.Column("score", sa.Integer(), nullable=True),
            sa.Column("log_date", sa.DateTime(timezone=True), nullable=False),
            sa.Column("product_id", sa.Uuid(), nullable=False),
            sa.Column("uploader_id", sa.Uuid(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(
                ["uploader_id"],
                ["auth_user.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )

    if "product_escalation_point" not in table_names:
        op.create_table(
            "product_escalation_point",
            sa.Column("product_id", sa.Uuid(), nullable=False),
            sa.Column("user_id", sa.Uuid(), nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
        )
    if "product_user_access" not in table_names:
        op.create_table(
            "product_user_access",
            sa.Column("user_id", sa.Uuid(), nullable=False),
            sa.Column("product_id", sa.Uuid(), nullable=False),
            sa.Column("granted", sa.Boolean(), server_default="f", nullable=False),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
        )
    if "additional_remark" not in table_names:
        op.create_table(
            "additional_remark",
            sa.Column("label", sa.String(), nullable=True),
            sa.Column("remark", sa.String(), nullable=True),
            sa.Column("product_id", sa.Uuid(), nullable=True),
            sa.Column("finding_id", sa.Uuid(), nullable=True),
            sa.Column(
                "id",
                sa.Uuid(),
                server_default=sa.text("gen_random_uuid()"),
                nullable=False,
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                server_default=sa.text("now()"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(["finding_id"], ["finding.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # sa.Column(
    #     "severity",
    #     sa.Enum("CRITICAL", "HIGH", "MEDIUM", "LOW", name="severityenum"),
    #     nullable=False,
    # ),
    op.drop_table("additional_remark")
    op.drop_table("product_user_access")
    op.drop_table("product_escalation_point")
    op.drop_table("log")
    op.drop_table("finding_revert_point")
    op.drop_index(
        "uix_unique_finding_except_closed",
        table_name="finding",
        postgresql_where=sa.text("status != 'CLOSED' OR status != 'PASSED'"),
    )
    op.drop_table("finding")
    op.drop_table("comment")
    op.drop_table("product")
    op.drop_table("api_token")
    op.drop_table("role_permission")
    op.drop_table("environment")
    op.drop_table("cve")
    op.drop_table("auth_user")
    op.drop_table("role")
    op.drop_table("project")
    op.drop_table("plugin")
    op.drop_table("permission")
    op.drop_table("global_config")
    op.drop_index("idx_finding_name_product", table_name="finding_name")
    op.drop_table("finding_name")
    op.drop_table("email_config")
    # ### end Alembic commands ###

    op.execute("DROP TYPE IF EXISTS severityenum")
    op.execute("DROP TYPE IF EXISTS fnstatusenum")
